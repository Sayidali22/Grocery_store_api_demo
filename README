Grocery Store API 🛒
A full-featured backend API for managing users, items, and shopping carts — built with Flask and PostgreSQL.
This project demonstrates my ability to design and implement secure, scalable APIs from scratch,
covering authentication, database modeling, and clean endpoint design.

🚀 Why I Built This
I wanted to create a real-world backend project that mirrors the functionality of a small e-commerce system.
The goal was to show I can go beyond “tutorial” apps by structuring a maintainable codebase,
integrating migrations, and handling real authentication flows.

✨ Key Features
User Authentication – JWT-based signup/login with secure password hashing.
Item Management – Add, list, update, and delete products with validation.
Cart Operations – Add items to a cart, update quantities, calculate totals.
Error Handling – Clean, consistent error responses.
Database Migrations – Version-controlled schema updates using Alembic.

🛠 Tech Stack
Language: Python
Framework: Flask
Database: PostgreSQL
ORM: SQLAlchemy
Auth: Flask-JWT-Extended
Migrations: Flask-Migrate (Alembic)

📂 Project Structure
flask_store/
│
├── app.py               # Application entry point
├── config.py            # Configuration settings
├── extensions.py        # DB and migration setup
├── models/              # SQLAlchemy models
├── routes/              # API route handlers
├── utils/               # Helper functions
├── requirements.txt     # Dependencies
└── .env                 # Environment variables (not committed)
